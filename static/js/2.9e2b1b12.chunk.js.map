{"version":3,"sources":["../static/js/2.9e2b1b12.chunk.js","pages/tutorial.md"],"names":["webpackJsonp","73","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","d","meta","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_1_react_junctions__","n","_ref","_ref$factories","factories","undefined","_factories$wrapper","wrapper","_factories$a","a","_factories$code","code","_factories$codeBlock","codeBlock","props","children","dangerouslySetInnerHTML","__html","_factories$em","em","_factories$h","h1","_factories$h2","h2","_factories$h3","h3","_factories$h4","h4","_factories$hr","hr","_factories$li","li","_factories$ol","ol","_factories$p","p","_factories$strong","strong","_factories$ul","ul","id","href","className"],"mappings":"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EFc,GAAIe,GAAM,kCACR,oBACA7B,KAAS,yBAEXwB,KACE,+DACAxB,KAAS,SACT,eACAA,KAAS,YACT,KAEFE,GAAW6B,UAAa,gBAAiB,2kBACzCP,KACE,oCACAxB,KAAS,SACT,mBACAA,KAAS,wBACT,wBACAA,KAAS,uBACT,kCACAA,KAAS,QACT,UAEFE,GAAW6B,UAAa,gBAAiB,68CACzCP,KACE,oOAEFA,KACEhB,KACE,0DAGJgB,KACE,iBACAxB,KAAS,wBACT,sBACAA,KAAS,SACT,6CACAA,KAAS,OACT,0BACAQ,KACE,WAEF,iBAEFgB,KACE,kCACAxB,KAAS,SACT,iCACAA,KAAS,YACT,UAEFY,GAAIiB,GAAM,uBACR,uBAEFL,KACE,aACAxB,KAAS,wBACT,0BACAA,KAAS,SACT,8BACAA,KAAS,YACT,qGAEFjB,OAAAK,EAAA,eACE,OACE2C,UAAW,cACbnC,KACEoB,GAAIa,GAAM,YACR7B,KAAS,aAEX4B,KACER,KACE,GACAM,KACE1B,KAAS,eACT,KAEF,YACAA,KAAS,QACT,+DACAA,KAAS,YACT,cACAA,KAAS,aACT,iCAEFoB,KACE,GACAM,KACE1B,KAAS,YACT,KAEF,IACAQ,KACE,uCAGJY,KACE,GACAM,KACE1B,KAAS,aACT,KAEF,IACAQ,KACE,uCAGJY,KACE,GACAM,KACE1B,KAAS,UACT,KAEF,WACAA,KAAS,WACT,QACAA,KAAS,cACT,MAGJwB,KACE1B,GAAGgC,KAAQ,2BACT,8BAKRN,KACE,QACAxB,KAAS,YACT,sJACAA,KAAS,UACT,QACAA,KAAS,eACT,KAEFwB,KACE,OACAxB,KAAS,eACT,sDACAA,KAAS,QACT,2EAEFjB,OAAAK,EAAA,eACE,OACE2C,UAAW,cACbnC,KACEoB,GAAIa,GAAM,QACR7B,KAAS,SAEX4B,KACER,KACE,GACAM,KACE1B,KAAS,aACT,KAEF,IACAQ,KACE,mCAGJY,KACE,GACAM,KACE1B,KAAS,SACT,KAEF,IACAQ,KACE,mCAGJY,KACE,GACAM,KACE1B,KAAS,OACT,KAEF,2CAGJwB,KACE1B,GAAGgC,KAAQ,u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","file":"static/js/2.9e2b1b12.chunk.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 73:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"meta\", function() { return meta; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_junctions__ = __webpack_require__(4);\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (_ref) {\n  var _ref$factories = _ref.factories,\n      factories = _ref$factories === undefined ? {} : _ref$factories;\n  var _factories$wrapper = factories.wrapper,\n      wrapper = _factories$wrapper === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('div') : _factories$wrapper,\n      _factories$a = factories.a,\n      a = _factories$a === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('a') : _factories$a,\n      _factories$code = factories.code,\n      code = _factories$code === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('code') : _factories$code,\n      _factories$codeBlock = factories.codeBlock,\n      codeBlock = _factories$codeBlock === undefined ? function (props, children) {\n    return Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(\"pre\", props, Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(\"code\", { dangerouslySetInnerHTML: { __html: children || props.children } }));\n  } : _factories$codeBlock,\n      _factories$em = factories.em,\n      em = _factories$em === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('em') : _factories$em,\n      _factories$h = factories.h1,\n      h1 = _factories$h === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('h1') : _factories$h,\n      _factories$h2 = factories.h2,\n      h2 = _factories$h2 === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('h2') : _factories$h2,\n      _factories$h3 = factories.h3,\n      h3 = _factories$h3 === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('h3') : _factories$h3,\n      _factories$h4 = factories.h4,\n      h4 = _factories$h4 === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('h4') : _factories$h4,\n      _factories$hr = factories.hr,\n      hr = _factories$hr === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('hr') : _factories$hr,\n      _factories$li = factories.li,\n      li = _factories$li === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('li') : _factories$li,\n      _factories$ol = factories.ol,\n      ol = _factories$ol === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('ol') : _factories$ol,\n      _factories$p = factories.p,\n      p = _factories$p === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('p') : _factories$p,\n      _factories$strong = factories.strong,\n      strong = _factories$strong === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('strong') : _factories$strong,\n      _factories$ul = factories.ul,\n      ul = _factories$ul === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createFactory\"])('ul') : _factories$ul;\n\n\n  return wrapper({}, h1({ \"id\": \"Junctions-Tutorial:-Make-this-site\" }, \"Junctions Tutorial: Make this site\"), p({}, \"This tutorial will walk you through creating a small documentation website using create-react-app, react-junctions, and Markdown. In fact, it’ll actually walk you through creating \", em({}, \"this\"), \" website. Cool, huh?\"), p({}, em({}, \"You can see the end result of this tutorial at its \", a({ \"href\": \"https://github.com/jamesknelson/junctions-tutorial\" }, \"companion repository\"), \". If you get stuck, try comparing your code to this repo.\")), h2({ \"id\": \"Creating-a-react-app\" }, \"Creating a react app\"), p({}, \"Let’s start out by installing create-react-app and react-junctions, and spinning up a fresh project:\"), codeBlock({ \"className\": \"language-bash\" }, \"<span class=\\\"token comment\\\"># Install the create-react-app command-line tool</span>\\n<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> -g create-react-app\\n\\n<span class=\\\"token comment\\\"># Create a new project under the `junctions-tutorial` directory</span>\\ncreate-react-app junctions-tutorial\\n<span class=\\\"token function\\\">cd</span> junctions-tutorial\\n\\n<span class=\\\"token comment\\\"># Install junctions and react-junctions</span>\\n<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> --save junctions react-junctions\\n\\n<span class=\\\"token comment\\\"># Start a development server at http://localhost:3000</span>\\n<span class=\\\"token function\\\">npm</span> run start\\n\"), p({}, \"If all has gone well, this should have created a few files for you, and opened a browser window with a spinning React logo. So far, so good.\"), p({}, \"Now, we just need to add some templates!\"), h2({ \"id\": \"Templates\" }, \"Templates\"), p({}, \"In a junctions-based app, \", strong({}, \"templates\"), \" are the objects that define your app’s URL structure. Here’s an example:\"), codeBlock({ \"className\": \"language-jsx\" }, \"<span class=\\\"token keyword\\\">let</span> ReadmeTemplate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createPageTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Junctions'</span><span class=\\\"token punctuation\\\">,</span>\\n  component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Junctions README<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span>Blah blah blah<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\"), p({}, \"There are three types of templates:\"), ul({}, li({}, \"\", strong({}, \"Page templates\"), \" define the pages that users can visit.\"), li({}, \"\", strong({}, \"Redirect templates\"), \" specify redirects between URLs.\"), li({}, \"\", strong({}, \"Junction templates\"), \" map URL parts to pages, redirects, and/or more junctions.\")), h3({ \"id\": \"Let's-add-a-template\" }, \"Let’s add a template\"), p({}, \"At the root of every app, you’ll need a \", code({}, \"JunctionTemplate\"), \" that maps URLs to content. So let’s add one.\"), p({}, \"You’ll want to add it to \", code({}, \"App.js\"), \"; the root React component lives there, so it makes sense that the root \", code({}, \"JunctionTemplate\"), \" will too.\"), codeBlock({ \"className\": \"language-js\" }, \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createJunctionTemplate<span class=\\\"token punctuation\\\">,</span> createPageTemplate <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'junctions'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> AppJunctionTemplate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createJunctionTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">createPageTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Junctions'</span><span class=\\\"token punctuation\\\">,</span>\\n      component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Junctions<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    <span class=\\\"token string\\\">'/api-reference'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">createPageTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Junctions API Reference'</span><span class=\\\"token punctuation\\\">,</span>\\n      component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Junctions API Reference<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  component<span class=\\\"token punctuation\\\">:</span> App<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\"), p({}, \"This junction template says a few things:\"), ol({}, li({}, \"The app has two URLs: \", code({}, \"/api-reference\"), \", and \", code({}, \"/\"), \" (the root URL)\"), li({}, \"The \", code({}, \"App\"), \" component will be used to render these URLs\"), li({}, \"The two pages have titles, and should be rendered with the specified components.\")), Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(\"aside\", null, wrapper({}, h4({ \"id\": \"Why-call-them-\\\"templates\\\"-and-not-just-\\\"pages\\\"-or-\\\"junctions\\\"\" }, \"Why call them “templates”, and not just “pages” or “junctions”?\"), p({}, \"Each time the browser’s location changes, your templates are used to create new \", a({ \"href\": \"/api-reference/#Page\" }, \"Page\"), \" and \", a({ \"href\": \"/api-reference/#Junction\" }, \"Junction\"), \" objects. These contain information that can’t be set ahead of time in the templates, including a Page’s current URL, or a Junction’s active child.\"))), p({}, \"Now that you’ve defined \", code({}, \"AppJunctionTemplate\"), \", your app has the information it needs to render different content for different URLs. But how do you \", em({}, \"use\"), \" this information?\"), h2({ \"id\": \"The-JunctionNavigation-Component\" }, \"The \", code({}, \"<JunctionNavigation>\"), \" Component\"), p({}, \"The \", code({}, \"<JunctionNavigation root={JunctionTemplate}>\"), \" component keeps track of the browser’s current location, rendering the root junction’s component whenever the URL changes.\"), p({}, \"If you’re familiar with react-router, this is a bit like the \", code({}, \"<Router>\"), \" \", Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(\"small\", null, \"(v3)\"), \" or \", code({}, \"<BrowserRouter>\"), \" \", Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(\"small\", null, \"(v4)\"), \" component. The main difference is that \", code({}, \"<JunctionNavigation>\"), \" also does a bit of housekeeping – managing the document title, scrolling to \", code({}, \"#hash\"), \" links, and keeping track of code splits.\"), h3({ \"id\": \"Let's-add-a-JunctionNavigation\" }, \"Let’s add a \", code({}, \"<JunctionNavigation>\")), p({}, \"By default, create-react-app starts the app by rendering an \", code({}, \"<App>\"), \" element in \", code({}, \"index.js\"), \":\"), codeBlock({ \"className\": \"language-jsx\" }, \"ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\"), p({}, \"You’ll want to replace this \", code({}, \"<App>\"), \" element with a \", code({}, \"<JunctionNavigation>\"), \" element, passing in \", code({}, \"AppJunctionTemplate\"), \" from the previous step as its \", code({}, \"root\"), \" prop:\"), codeBlock({ \"className\": \"language-jsx\" }, \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> JunctionNavigation <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-junctions'</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> AppJunctionTemplate <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span>\\n\\n<span class=\\\"token comment\\\">// Instead of rendering `&lt;App>` directly, it will be rendered by</span>\\n<span class=\\\"token comment\\\">// `&lt;JunctionNavigation>`.</span>\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>JunctionNavigation</span> <span class=\\\"token attr-name\\\">root</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>AppJunctionTemplate<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\"), p({}, \"Go ahead - try making this change if you haven’t already. Once you’ve saved the file, create-react-app’s development server should automatically reload the page, and you should still see a spinning React logo.\"), p({}, em({}, \"But you shouldn’t see any change in the content!\")), p({}, \"The thing is, \", code({}, \"<JunctionNavigation>\"), \" is just rendering \", code({}, \"<App>\"), \". And we haven’t changed touched the \", code({}, \"App\"), \" class yet, so nothing \", em({}, \"visible\"), \" has changed.\"), p({}, \"But one thing has changed: the \", code({}, \"<App>\"), \" component is now receiving a \", code({}, \"junction\"), \" prop.\"), h2({ \"id\": \"Junctions-and-Pages\" }, \"Junctions and Pages\"), p({}, \"When your \", code({}, \"<JunctionNavigation>\"), \" component renders the \", code({}, \"<App>\"), \" component, it passes it a \", code({}, \"junction\"), \" prop. This prop contains the navigation state for your entire app, and looks a little like this:\"), Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(\"div\", { className: \"properties\" }, wrapper({}, h4({ \"id\": \"Junction\" }, code({}, \"Junction\")), ul({}, li({}, \"\", strong({}, code({}, \"activeChild\"), \":\"), \" Holds a \", code({}, \"Page\"), \" object, based on the active child from the junction’s \", code({}, \"children\"), \" – or \", code({}, \"undefined\"), \" if there is no active child.\"), li({}, \"\", strong({}, code({}, \"children\"), \":\"), \" \", em({}, \"Copied from the junction template.\")), li({}, \"\", strong({}, code({}, \"component\"), \":\"), \" \", em({}, \"Copied from the junction template.\")), li({}, \"\", strong({}, code({}, \"status\"), \":\"), \" Either \", code({}, \"\\\"ready\\\"\"), \", or \", code({}, \"\\\"notfound\\\"\"), \".\")), p({}, a({ \"href\": \"/api-reference#Junction\" }, \"See all properties »\")))), p({}, \"Each \", code({}, \"Junction\"), \" object is based on one of your Junction Templates, but has extra properties that are derived from the browser’s current URL – including \", code({}, \"status\"), \" and \", code({}, \"activeChild\"), \".\"), p({}, \"The \", code({}, \"activeChild\"), \" property is particularly important; it contains a \", code({}, \"Page\"), \" object, with details on whichever page is selected by the current URL:\"), Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(\"div\", { className: \"properties\" }, wrapper({}, h4({ \"id\": \"Page\" }, code({}, \"Page\")), ul({}, li({}, \"\", strong({}, code({}, \"component\"), \":\"), \" \", em({}, \"Copied from the page template.\")), li({}, \"\", strong({}, code({}, \"title\"), \":\"), \" \", em({}, \"Copied from the page template.\")), li({}, \"\", strong({}, code({}, \"url\"), \":\"), \" The URL at which the page is mounted.\")), p({}, a({ \"href\": \"/api-reference#Page\" }, \"See all properties »\")))), h2({ \"id\": \"Rendering-Content\" }, \"Rendering Content\"), p({}, \"Now that your \", code({}, \"App\"), \" component receives a \", code({}, \"junction\"), \" prop, you can decide what to render by checking \", code({}, \"this.props.junction.activeChild\"), \".\"), p({}, \"Keeping in mind that \", code({}, \"activeChild\"), \" may be \", code({}, \"undefined\"), \", your new App class may look something like this:\"), codeBlock({ \"className\": \"language-js\" }, \"<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">renderContent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> junction <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n\\n    <span class=\\\"token comment\\\">// If there is a currently selected page, get its component.</span>\\n    <span class=\\\"token comment\\\">// Use an uppercase `C` so the variable can be used in a JSX element.</span>\\n    <span class=\\\"token keyword\\\">let</span> Component <span class=\\\"token operator\\\">=</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>junction<span class=\\\"token punctuation\\\">.</span>activeChild <span class=\\\"token operator\\\">&amp;&amp;</span> \\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>junction<span class=\\\"token punctuation\\\">.</span>activeChild<span class=\\\"token punctuation\\\">.</span>component\\n    \\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// If the user enters an unknown URL, there will be no active child,</span>\\n      <span class=\\\"token comment\\\">// and thus no component.</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token number\\\">404</span><span class=\\\"token punctuation\\\">:</span> Page Not Found<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// Render the page's component, passing in the active Page object</span>\\n      <span class=\\\"token comment\\\">// as a prop.</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span> <span class=\\\"token attr-name\\\">page</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>junction<span class=\\\"token punctuation\\\">.</span>activeChild<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>App<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderContent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"), p({}, \"Once you’ve made this change and saved the file, your site should display the index page’s content. And if you change the browser’s URL to \", code({}, \"http://localhost:3000/api-reference\"), \", the heading should change too.\"), p({}, \"Did your app work as expected? If not, you’ll want to figure out what is wrong before continuing, as this step is crucial to making a working app.\"), p({}, \"So does your app work? In that case, congratulations! You’ve built a working app with Junctions!\"), h2({ \"id\": \"Links\" }, \"Links\"), p({}, \"Because junctions produces static files, you \", em({}, \"can\"), \" create links with HTML \", code({}, \"<a>\"), \" tags. But they won’t be ideal.\"), p({}, \"The thing about \", code({}, \"<a>\"), \" tags is that they’ll cause the browser to completely reload the page. For example, you can try clicking on the link below, which goes to the \", em({}, \"Links\"), \" heading above:\"), p({}, code({}, \"<a href=\\\"/tutorial#Links\\\">\"), Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(\"a\", { href: \"/tutorial#Links\" }, \"Tutorial / Links\"), code({}, \"</a>\")), p({}, \"When clicking this link, you may notice a flash of no content as the browser reloads the page. \", Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(\"small\", null, \"(Or you might not, because Junctions generates ridiculously fast websites.)\")), p({}, \"To solve this, you can use the HTML5 History API’s \", a({ \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method\" }, \"pushState\"), \" method. This method changes the URL in the browser’s location bar, \", em({}, \"without\"), \" reloading the page.\"), p({}, \"But writing your own \", code({}, \"pushState\"), \" code wouldn’t be much fun, which is why Junctions gives you a \", code({}, \"<Link>\"), \" component. This component behaves like \", code({}, \"<a>\"), \", but uses \", code({}, \"pushState\"), \" internally. Notice the speed difference when you click this link:\"), p({}, code({}, \"<Link href=\\\"/tutorial#Links\\\">\"), Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(__WEBPACK_IMPORTED_MODULE_1_react_junctions__[\"c\" /* Link */], { href: \"/tutorial#Links\" }, \"Tutorial / Links\"), code({}, \"</Link>\")), h3({ \"id\": \"Let's-add-a-navbar\" }, \"Let’s add a navbar\"), p({}, \"The navbar on the left of this page is chock-full of links. So let’s test out the \", code({}, \"<Link>\"), \" component by creating an unstyled \", code({}, \"<Navbar>\"), \":\"), codeBlock({ \"className\": \"language-jsx\" }, \"<span class=\\\"token comment\\\">// src/Navbar.jsx</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Link <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-junctions'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Navbar</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>Navbar<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Link</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Junctions<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Link</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Link</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/api-reference<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>API Reference<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Link</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">></span></span>\\n\"), p({}, \"Where should this \", code({}, \"<Navbar>\"), \" element be rendered from? One possibility would be to add it to each of your page’s components. But as the site grows, this would become painful.\"), p({}, \"Instead, it makes sense to render the \", code({}, \"<Navbar>\"), \" element from the \", code({}, \"<App>\"), \" component, along with the current page. Here’s an example:\"), codeBlock({ \"className\": \"language-jsx\" }, \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Navbar <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Navbar'</span>\\n\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>App<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Navbar</span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>App-content<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderContent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"), h2({ \"id\": \"Markdown-Components\" }, \"Markdown Components\"), p({}, \"If you’re creating a documentation website, you’ll probably want to write your content in a plain-text format like \", a({ \"href\": \"https://daringfireball.net/projects/markdown/\" }, \"Markdown\"), \". \", Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(\"small\", null, \"HTML is great, but the 42nd time you have to type out <p> is just so…\")), p({}, \"The problem, of course, is that Junctions doesn’t expect plain-text content; it expects pages to provide a React Component.\"), p({}, \"One possible solution would be to load your content as text, and render it with a component like \", a({ \"href\": \"https://github.com/acdlite/react-remarkable\" }, \"react-remarkable\"), \". And while this works, it has one major problem: your links will be plain-old \", code({}, \"<a>\"), \" elements. And they’ll be \", em({}, \"slow\"), \".\"), p({}, \"Instead, you’ll want to convert your Markdown directly into a React component with \", code({}, \"<Link>\"), \" elements for links. There are two ways to do this:\"), ul({}, li({}, \"At runtime, using \", a({ \"href\": \"https://github.com/rexxars/react-markdown\" }, \"react-markdown\"), \".\"), li({}, \"At build time, using \", a({ \"href\": \"https://github.com/jamesknelson/mdx-loader\" }, \"mdx-loader\"), \".\")), p({}, \"I recommend doing that conversion at build time, as it produces smaller builds, faster responses, and also allows you to import files and use JSX within your markdown. \", Object(__WEBPACK_IMPORTED_MODULE_0_react__[\"createElement\"])(\"small\", null, \"Disclaimer: I created mdx-loader.\")), h3({ \"id\": \"Let's-add-a-Markdown-page\" }, \"Let’s add a Markdown page\"), p({}, \"To start, you’ll need to add a couple packages to your project:\"), codeBlock({ \"className\": \"language-bash\" }, \"<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> --save-dev mdxc mdx-loader\\n\"), p({}, \"You’ll also need to add this \", code({}, \".babelrc\"), \" to the root directory of your project:\"), codeBlock({ \"className\": \"language-json\" }, \"<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"presets\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"babel-preset-react-app\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"), p({}, \"With this setup complete, you can now import Markdown files as if they were React components!\"), hr({}), p({}, \"To test this out, you’ll first need a Markdown file. I like to place my site’s markdown files under a \", code({}, \"src/content\"), \" directory, so let’s add a \", code({}, \"src/content/index.md\"), \" file:\"), codeBlock({ \"className\": \"language-markdown\" }, \"<span class=\\\"token title important\\\">Junctions\\n<span class=\\\"token punctuation\\\">=========</span></span>\\n\\n<span class=\\\"token bold\\\"><span class=\\\"token punctuation\\\">**</span>A batteries-included router for React.<span class=\\\"token punctuation\\\">**</span></span>\\n\\n<span class=\\\"token title important\\\"><span class=\\\"token punctuation\\\">##</span> Documentation</span>\\n\\n<span class=\\\"token list punctuation\\\">-</span> <span class=\\\"token url\\\">[API Reference](/api-reference)</span>\\n\"), p({}, \"You can then import the document as a React component by prefixing the filename with \", code({}, \"!babel-loader!mdx-loader!\"), \". This tells Webpack to run \", code({}, \"index.md\"), \" through MDX, and then Babel, before importing the resulting JavaScript.\"), p({}, \"You’ll also need to tell eslint that it is ok to use the Webpack \", code({}, \"!\"), \" syntax; make sure that the following comment goes at the very top of your file!\"), codeBlock({ \"className\": \"language-jsx\" }, \"<span class=\\\"token comment\\\">/* eslint-disable import/no-webpack-loader-syntax */</span>\\n<span class=\\\"token keyword\\\">import</span> IndexDocument <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'!babel-loader!mdx-loader!./content/index.md'</span>\\n\"), p({}, \"Finally, set your index page’s \", code({}, \"component\"), \" property to \", code({}, \"IndexDocument\"), \" and refresh the page; you should see the contents of your new Markdown file!\"), h3({ \"id\": \"Configuring-the-Markdown-link-component\" }, \"Configuring the Markdown link component\"), p({}, \"By default, MDX uses vanilla \", code({}, \"<a>\"), \" tags for links – but we want to use \", code({}, \"<Link>\"), \" elements to improve performance.\"), p({}, \"Luckily, MDX allows you to configure \", a({ \"href\": \"https://github.com/jamesknelson/mdxc#factories\" }, \"factories\"), \" for each type of markup that it can produce. To do so, you just pass a \", code({}, \"factories\"), \" prop to the document component.\"), p({}, \"For example, here’s how you’d create an \", code({}, \"IndexDocumentWrapper\"), \" component that renders its links as JSX \", code({}, \"<Link>\"), \" elements:\"), codeBlock({ \"className\": \"language-jsx\" }, \"<span class=\\\"token comment\\\">// Define factories outside of the component, so that the factories aren't</span>\\n<span class=\\\"token comment\\\">// re-created each time the document renders</span>\\n<span class=\\\"token keyword\\\">let</span> factories <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>Link<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">IndexDocumentWrapper</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>IndexDocument</span> <span class=\\\"token attr-name\\\">factories</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>factories<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n\"), p({}, \"By using \", code({}, \"IndexDocumentWrapper\"), \" as your index page \", code({}, \"component\"), \", you’ll ensure that the page’s links are just as snappy as any other links within your application.\"), p({}, \"You can also use MDX factories to configure other behaviors. For example, you could use factories to add \", code({}, \"#hash\"), \" links to each of your document’s headings.\"), p({}, \"But while factories give you flexibility, they’re also rather verbose. Creating a new wrapper component for each page would quickly get tiresome. But luckily, you don’t have to!\"), h2({ \"id\": \"Split-Content\" }, \"Split Content\"), p({}, \"Up until now, this tutorial has only used a subset of the available options for page templates. In fact, you can configure more than just a \", code({}, \"title\"), \" and a \", code({}, \"component\"), \"; you can see the full suite of options in the \", a({ \"href\": \"/api-reference/#createPageTemplate\" }, \"API Reference\"), \".\"), p({}, \"There is one option in particular that comes in handy: \", code({}, \"getContent\"), \". This option lets you specify a function that returns your content, or a \", em({}, \"promise\"), \" to your content. The function will then be called the first time the page is loaded.\"), p({}, \"Your content can be anything – a text file, a React component, or even a module returned by ESNext’s proposed \", code({}, \"import\"), \" syntax. And once your content is available, it can be accessed by the page’s component under the \", code({}, \"content\"), \" property of your Page object.\"), p({}, \"For example, here’s how you’d use \", code({}, \"getContent\"), \" and \", code({}, \"import()\"), \" to dynamically load a markdown file when the page is first accessed:\"), codeBlock({ \"className\": \"language-jsx\" }, \"<span class=\\\"token function\\\">createPageTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Junctions API Reference'</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  getContent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token comment\\\">// `import()` returns a promise to an object with all of the module's</span>\\n    <span class=\\\"token comment\\\">// exports.</span>\\n    <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'!babel-loader!mdx-loader!./content/api-reference.md'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// When the import statement completes, the loaded module will be available</span>\\n  <span class=\\\"token comment\\\">// under `page.content`.</span>\\n  component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> page <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token operator\\\">!</span>page<span class=\\\"token punctuation\\\">.</span>content\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>Loading<span class=\\\"token operator\\\">...</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>page<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\"), h3({ \"id\": \"Content-Wrapper-Components\" }, \"Content Wrapper Components\"), p({}, \"Now that your page’s content has been separated from the component that renders it, it is possible to create a single Wrapper component that can be shared over all markdown pages.\"), p({}, \"You have a lot of flexibility in how you implement this. You can add loading spinners, error messages, markdown factories, menus, and a bunch of other bits and pieces.\"), p({}, \"For example, here’s a stripped-down version of the \", a({ \"href\": \"https://github.com/jamesknelson/junctions/blob/master/site/src/MDXWrapper.js\" }, \"wrapper component\"), \" for this website. It makes use of the Page object’s \", code({}, \"contentStatus\"), \" property to give the user feedback on the content’s status.\"), codeBlock({ \"className\": \"language-jsx\" }, \"<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Link <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-junctions'</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">createHeadingFactory</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>\\n      type<span class=\\\"token punctuation\\\">,</span>\\n      props<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token comment\\\">// Append a hash link to each heading, which will be hidden via</span>\\n      <span class=\\\"token comment\\\">// CSS until he mouse hovers over the heading.</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Link</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>heading-link<span class=\\\"token punctuation\\\">'</span></span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'#'</span><span class=\\\"token operator\\\">+</span>props<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>#<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Link</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MarkdownWrapper</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  factories <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>Link<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    h1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">createHeadingFactory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    h2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">createHeadingFactory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    h3<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">createHeadingFactory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h3'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n \\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> page <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>page\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>MarkdownWrapper<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span> page<span class=\\\"token punctuation\\\">.</span>contentStatus <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'busy'</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>page-loading<span class=\\\"token punctuation\\\">'</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">{</span> page<span class=\\\"token punctuation\\\">.</span>contentStatus <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'ready'</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>page-ready<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>page<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n              factories<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>factories<span class=\\\"token punctuation\\\">,</span>\\n              page<span class=\\\"token punctuation\\\">:</span> page<span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">{</span> page<span class=\\\"token punctuation\\\">.</span>contentStatus <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'error'</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>page-error<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Gosh darn it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"), p({}, \"Once you have a Markdown wrapper component, you can use it in a page template’s \", code({}, \"component\"), \" property:\"), codeBlock({ \"className\": \"language-jsx\" }, \"<span class=\\\"token function\\\">createPageTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Junctions API Reference'</span><span class=\\\"token punctuation\\\">,</span>\\n  component<span class=\\\"token punctuation\\\">:</span> MarkdownComponent<span class=\\\"token punctuation\\\">,</span>\\n  getContent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'!babel-loader!mdx-loader!./content/api-reference.md'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\"), p({}, \"Congratulations on getting this far through the tutorial! By now, you’ve learned everything you need to re-create this website – at least within create-react-app’s development server!\"), p({}, \"The only thing left to do is to turn your site into a production-ready static website!\"), h2({ \"id\": \"Static-Builds\" }, \"Static Builds\"), p({}, \"To create a static website from a junctions app, you’ll first need to add the \", code({}, \"junctions-static\"), \" package to your app:\"), codeBlock({ \"className\": \"language-bash\" }, \"<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> --save-dev junctions-static\\n\"), p({}, \"This package includes a command-line tool that loads the output of CRA’s \", code({}, \"build\"), \" script, then walks through each junction template’s children to find your app’s URLs.\"), p({}, \"You can call the command line tool manually, by I recommend adding it to the end of the \", code({}, \"build\"), \" script in \", code({}, \"package.json\"), \". Here’s what the resulting line will look like:\"), codeBlock({ \"className\": \"language-json\" }, \"<span class=\\\"token property\\\">\\\"build\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"react-scripts build &amp;&amp; junctions-static build -m build/static/js/main.*.js -r create-react-app\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\"), h3({ \"id\": \"Changes-to-index.js\" }, \"Changes to \", code({}, \"index.js\")), p({}, \"To get the static build working, you’ll need to make some changes to your app’s entry point. Here’s an example of a modified \", code({}, \"index.js\"), \"; I’ll go through the changes one-by-one after the code listing.\"), codeBlock({ \"className\": \"language-jsx\" }, \"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> content <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>JunctionNavigation</span>\\n      <span class=\\\"token attr-name\\\">root</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>AppJunctionTemplate<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token attr-name\\\">waitForInitialContent</span>\\n    <span class=\\\"token punctuation\\\">/></span></span>\\n\\n  <span class=\\\"token keyword\\\">let</span> node <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>NODE_ENV <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'production'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hydrate</span><span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>NODE_ENV <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'production'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">registerServiceWorker</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nwindow<span class=\\\"token punctuation\\\">.</span>JunctionsStaticApp <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  root<span class=\\\"token punctuation\\\">:</span> AppJunctionTemplate<span class=\\\"token punctuation\\\">,</span>\\n  main<span class=\\\"token punctuation\\\">:</span> main\\n<span class=\\\"token punctuation\\\">}</span>\\n\"), h4({ \"id\": \"1.-Add-a-main-function\" }, \"1. Add a \", code({}, \"main\"), \" function\"), p({}, \"Because junctions-static loads your app from a Node environment, you won’t want your app to follow its normal boot process in a static build.\"), p({}, \"To solve this, I recommend moving the contents of \", code({}, \"index.js\"), \" into a \", code({}, \"main()\"), \" function, and only calling that function when running from CRA’s development server.\"), codeBlock({ \"className\": \"language-js\" }, \"<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>NODE_ENV <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'production'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">registerServiceWorker</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"), h4({ \"id\": \"2.-Call-ReactDOM.hydrate-in-production\" }, \"2. Call \", code({}, \"ReactDOM.hydrate\"), \" in production\"), p({}, \"This method is just like \", code({}, \"ReactDOM.render\"), \", but it lets React know that the\", \"content has been statically rendered, and is already available in the DOM.\"), codeBlock({ \"className\": \"language-js\" }, \"ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hydrate</span><span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span>\\n\"), h4({ \"id\": \"3.-Export-your-root-junction-template-and-main()-function\" }, \"3. Export your root junction template and \", code({}, \"main()\"), \" function\"), p({}, \"Junctions-static can’t find your application’s junctions unless you tell it where they are. Likewise, it can’t call the \", code({}, \"main()\"), \" function unless it has access to it.\"), p({}, \"To solve this, you’ll need to export your junction template and \", code({}, \"main\"), \" function by adding them to the global \", code({}, \"window\"), \" object.\"), codeBlock({ \"className\": \"language-js\" }, \"window<span class=\\\"token punctuation\\\">.</span>JunctionsStaticApp <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  root<span class=\\\"token punctuation\\\">:</span> AppJunctionTemplate<span class=\\\"token punctuation\\\">,</span>\\n  main<span class=\\\"token punctuation\\\">:</span> main\\n<span class=\\\"token punctuation\\\">}</span>\\n\"), h4({ \"id\": \"4.-Add-the-waitForInitialContent-prop-to-JunctionNavigation\" }, \"4. Add the \", code({}, \"waitForInitialContent\"), \" prop to \", code({}, \"<JunctionNavigation>\")), p({}, \"This prop tells Junctions to wait for your initial page’s content promise to resolve before rendering any content. This ensures that you don’t see a loading message while the first page is loading.\"), codeBlock({ \"className\": \"language-jsx\" }, \"<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>JunctionNavigation</span>\\n  <span class=\\\"token attr-name\\\">root</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>AppJunctionTemplate<span class=\\\"token punctuation\\\">}</span></span>\\n  <span class=\\\"token attr-name\\\">waitForInitialContent</span>\\n<span class=\\\"token punctuation\\\">/></span></span>\\n\"), h3({ \"id\": \"Congratulations!\" }, \"Congratulations!\"), p({}, \"With these changes, your build should now work! To test it out, just run:\"), codeBlock({ \"className\": \"language-bash\" }, \"<span class=\\\"token function\\\">npm</span> run build\\n\"), p({}, \"And then follow CRA’s instructions to start a build server!\"), p({}, \"There’s just one thing left to do. If you open your site in a browser, Junctions will update the document title to “Junctions”… but not before flashing CRA’s default title for a split second.\"), p({}, \"To makes sure that each of your page’s files has the correct title, change the \", code({}, \"<title>\"), \" line in \", code({}, \"public/index.html\"), \" to the following:\"), codeBlock({ \"className\": \"language-html\" }, \"<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>%PAGE_TITLE%<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n\"), p({}, \"In fact, if you add a \", code({}, \"meta\"), \" property to your page templates, you’ll be able to access any of its values using the \", code({}, \"%template%\"), \" syntax within \", code({}, \"index.html\"), \". You can see this in action in \", a({ \"href\": \"https://github.com/jamesknelson/junctions/blob/master/site/public/index.html\" }, \"the source\"), \" for this site’s \", code({}, \"index.html\"), \".\"), p({}, \"And with that, you’re ready to start building sites with junctions. Congratulations!\"));\n});\n\nvar meta = {};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/2.9e2b1b12.chunk.js","import React, { createElement, createFactory } from 'react'\nimport { Link } from 'react-junctions'\nexport default function({ factories={} }) {\n  const {\n    wrapper = createFactory('div'),\n    a = createFactory('a'),\n    code = createFactory('code'),\n    codeBlock = (props, children) => createElement(\"pre\", props, createElement(\"code\", { dangerouslySetInnerHTML: { __html: children || props.children } })),\n    em = createFactory('em'),\n    h1 = createFactory('h1'),\n    h2 = createFactory('h2'),\n    h3 = createFactory('h3'),\n    h4 = createFactory('h4'),\n    hr = createFactory('hr'),\n    li = createFactory('li'),\n    ol = createFactory('ol'),\n    p = createFactory('p'),\n    strong = createFactory('strong'),\n    ul = createFactory('ul'),\n  } = factories\n\n  return wrapper({},\n\nh1({\"id\": \"Junctions-Tutorial:-Make-this-site\"},\n  \"Junctions Tutorial: Make this site\",\n),\np({},\n  \"This tutorial will walk you through creating a small documentation website using create-react-app, react-junctions, and Markdown. In fact, it’ll actually walk you through creating \",\n  em({},\n    \"this\",\n  ),\n  \" website. Cool, huh?\",\n),\np({},\n  em({},\n    \"You can see the end result of this tutorial at its \",\n    a({\"href\": \"https://github.com/jamesknelson/junctions-tutorial\"},\n      \"companion repository\",\n    ),\n    \". If you get stuck, try comparing your code to this repo.\",\n  ),\n),\nh2({\"id\": \"Creating-a-react-app\"},\n  \"Creating a react app\",\n),\np({},\n  \"Let’s start out by installing create-react-app and react-junctions, and spinning up a fresh project:\",\n),\ncodeBlock({\"className\": \"language-bash\"}, \"<span class=\\\"token comment\\\"># Install the create-react-app command-line tool</span>\\n<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> -g create-react-app\\n\\n<span class=\\\"token comment\\\"># Create a new project under the `junctions-tutorial` directory</span>\\ncreate-react-app junctions-tutorial\\n<span class=\\\"token function\\\">cd</span> junctions-tutorial\\n\\n<span class=\\\"token comment\\\"># Install junctions and react-junctions</span>\\n<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> --save junctions react-junctions\\n\\n<span class=\\\"token comment\\\"># Start a development server at http://localhost:3000</span>\\n<span class=\\\"token function\\\">npm</span> run start\\n\"),\np({},\n  \"If all has gone well, this should have created a few files for you, and opened a browser window with a spinning React logo. So far, so good.\",\n),\np({},\n  \"Now, we just need to add some templates!\",\n),\nh2({\"id\": \"Templates\"},\n  \"Templates\",\n),\np({},\n  \"In a junctions-based app, \",\n  strong({},\n    \"templates\",\n  ),\n  \" are the objects that define your app’s URL structure. Here’s an example:\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"<span class=\\\"token keyword\\\">let</span> ReadmeTemplate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createPageTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Junctions'</span><span class=\\\"token punctuation\\\">,</span>\\n  component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Junctions README<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span>Blah blah blah<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\"),\np({},\n  \"There are three types of templates:\",\n),\nul({},\n  li({},\n    \"\",\n    strong({},\n      \"Page templates\",\n    ),\n    \" define the pages that users can visit.\",\n  ),\n  li({},\n    \"\",\n    strong({},\n      \"Redirect templates\",\n    ),\n    \" specify redirects between URLs.\",\n  ),\n  li({},\n    \"\",\n    strong({},\n      \"Junction templates\",\n    ),\n    \" map URL parts to pages, redirects, and/or more junctions.\",\n  ),\n),\nh3({\"id\": \"Let's-add-a-template\"},\n  \"Let’s add a template\",\n),\np({},\n  \"At the root of every app, you’ll need a \",\n  code({}, \"JunctionTemplate\"),\n  \" that maps URLs to content. So let’s add one.\",\n),\np({},\n  \"You’ll want to add it to \",\n  code({}, \"App.js\"),\n  \"; the root React component lives there, so it makes sense that the root \",\n  code({}, \"JunctionTemplate\"),\n  \" will too.\",\n),\ncodeBlock({\"className\": \"language-js\"}, \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createJunctionTemplate<span class=\\\"token punctuation\\\">,</span> createPageTemplate <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'junctions'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> AppJunctionTemplate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createJunctionTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">createPageTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Junctions'</span><span class=\\\"token punctuation\\\">,</span>\\n      component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Junctions<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    <span class=\\\"token string\\\">'/api-reference'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">createPageTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Junctions API Reference'</span><span class=\\\"token punctuation\\\">,</span>\\n      component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Junctions API Reference<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  component<span class=\\\"token punctuation\\\">:</span> App<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\"),\np({},\n  \"This junction template says a few things:\",\n),\nol({},\n  li({},\n    \"The app has two URLs: \",\n    code({}, \"/api-reference\"),\n    \", and \",\n    code({}, \"/\"),\n    \" (the root URL)\",\n  ),\n  li({},\n    \"The \",\n    code({}, \"App\"),\n    \" component will be used to render these URLs\",\n  ),\n  li({},\n    \"The two pages have titles, and should be rendered with the specified components.\",\n  ),\n),\ncreateElement(\n  \"aside\",\n  null,\n  wrapper({},\n    h4({\"id\": \"Why-call-them-\\\"templates\\\"-and-not-just-\\\"pages\\\"-or-\\\"junctions\\\"\"},\n      \"Why call them “templates”, and not just “pages” or “junctions”?\",\n    ),\n    p({},\n      \"Each time the browser’s location changes, your templates are used to create new \",\n      a({\"href\": \"/api-reference/#Page\"},\n        \"Page\",\n      ),\n      \" and \",\n      a({\"href\": \"/api-reference/#Junction\"},\n        \"Junction\",\n      ),\n      \" objects. These contain information that can’t be set ahead of time in the templates, including a Page’s current URL, or a Junction’s active child.\",\n    ),\n  ),\n),\np({},\n  \"Now that you’ve defined \",\n  code({}, \"AppJunctionTemplate\"),\n  \", your app has the information it needs to render different content for different URLs. But how do you \",\n  em({},\n    \"use\",\n  ),\n  \" this information?\",\n),\nh2({\"id\": \"The-JunctionNavigation-Component\"},\n  \"The \",\n  code({}, \"<JunctionNavigation>\"),\n  \" Component\",\n),\np({},\n  \"The \",\n  code({}, \"<JunctionNavigation root={JunctionTemplate}>\"),\n  \" component keeps track of the browser’s current location, rendering the root junction’s component whenever the URL changes.\",\n),\np({},\n  \"If you’re familiar with react-router, this is a bit like the \",\n  code({}, \"<Router>\"),\n  \" \",\n  createElement(\"small\", null,\n    \"(v3)\",\n  ),\n  \" or \",\n  code({}, \"<BrowserRouter>\"),\n  \" \",\n  createElement(\"small\", null,\n    \"(v4)\",\n  ),\n  \" component. The main difference is that \",\n  code({}, \"<JunctionNavigation>\"),\n  \" also does a bit of housekeeping – managing the document title, scrolling to \",\n  code({}, \"#hash\"),\n  \" links, and keeping track of code splits.\",\n),\nh3({\"id\": \"Let's-add-a-JunctionNavigation\"},\n  \"Let’s add a \",\n  code({}, \"<JunctionNavigation>\"),\n),\np({},\n  \"By default, create-react-app starts the app by rendering an \",\n  code({}, \"<App>\"),\n  \" element in \",\n  code({}, \"index.js\"),\n  \":\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>App</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\"),\np({},\n  \"You’ll want to replace this \",\n  code({}, \"<App>\"),\n  \" element with a \",\n  code({}, \"<JunctionNavigation>\"),\n  \" element, passing in \",\n  code({}, \"AppJunctionTemplate\"),\n  \" from the previous step as its \",\n  code({}, \"root\"),\n  \" prop:\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> JunctionNavigation <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-junctions'</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> AppJunctionTemplate <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span>\\n\\n<span class=\\\"token comment\\\">// Instead of rendering `&lt;App>` directly, it will be rendered by</span>\\n<span class=\\\"token comment\\\">// `&lt;JunctionNavigation>`.</span>\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>JunctionNavigation</span> <span class=\\\"token attr-name\\\">root</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>AppJunctionTemplate<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\"),\np({},\n  \"Go ahead - try making this change if you haven’t already. Once you’ve saved the file, create-react-app’s development server should automatically reload the page, and you should still see a spinning React logo.\",\n),\np({},\n  em({},\n    \"But you shouldn’t see any change in the content!\",\n  ),\n),\np({},\n  \"The thing is, \",\n  code({}, \"<JunctionNavigation>\"),\n  \" is just rendering \",\n  code({}, \"<App>\"),\n  \". And we haven’t changed touched the \",\n  code({}, \"App\"),\n  \" class yet, so nothing \",\n  em({},\n    \"visible\",\n  ),\n  \" has changed.\",\n),\np({},\n  \"But one thing has changed: the \",\n  code({}, \"<App>\"),\n  \" component is now receiving a \",\n  code({}, \"junction\"),\n  \" prop.\",\n),\nh2({\"id\": \"Junctions-and-Pages\"},\n  \"Junctions and Pages\",\n),\np({},\n  \"When your \",\n  code({}, \"<JunctionNavigation>\"),\n  \" component renders the \",\n  code({}, \"<App>\"),\n  \" component, it passes it a \",\n  code({}, \"junction\"),\n  \" prop. This prop contains the navigation state for your entire app, and looks a little like this:\",\n),\ncreateElement(\n  \"div\",\n  { className: \"properties\" },\n  wrapper({},\n    h4({\"id\": \"Junction\"},\n      code({}, \"Junction\"),\n    ),\n    ul({},\n      li({},\n        \"\",\n        strong({},\n          code({}, \"activeChild\"),\n          \":\",\n        ),\n        \" Holds a \",\n        code({}, \"Page\"),\n        \" object, based on the active child from the junction’s \",\n        code({}, \"children\"),\n        \" – or \",\n        code({}, \"undefined\"),\n        \" if there is no active child.\",\n      ),\n      li({},\n        \"\",\n        strong({},\n          code({}, \"children\"),\n          \":\",\n        ),\n        \" \",\n        em({},\n          \"Copied from the junction template.\",\n        ),\n      ),\n      li({},\n        \"\",\n        strong({},\n          code({}, \"component\"),\n          \":\",\n        ),\n        \" \",\n        em({},\n          \"Copied from the junction template.\",\n        ),\n      ),\n      li({},\n        \"\",\n        strong({},\n          code({}, \"status\"),\n          \":\",\n        ),\n        \" Either \",\n        code({}, \"\\\"ready\\\"\"),\n        \", or \",\n        code({}, \"\\\"notfound\\\"\"),\n        \".\",\n      ),\n    ),\n    p({},\n      a({\"href\": \"/api-reference#Junction\"},\n        \"See all properties »\",\n      ),\n    ),\n  ),\n),\np({},\n  \"Each \",\n  code({}, \"Junction\"),\n  \" object is based on one of your Junction Templates, but has extra properties that are derived from the browser’s current URL – including \",\n  code({}, \"status\"),\n  \" and \",\n  code({}, \"activeChild\"),\n  \".\",\n),\np({},\n  \"The \",\n  code({}, \"activeChild\"),\n  \" property is particularly important; it contains a \",\n  code({}, \"Page\"),\n  \" object, with details on whichever page is selected by the current URL:\",\n),\ncreateElement(\n  \"div\",\n  { className: \"properties\" },\n  wrapper({},\n    h4({\"id\": \"Page\"},\n      code({}, \"Page\"),\n    ),\n    ul({},\n      li({},\n        \"\",\n        strong({},\n          code({}, \"component\"),\n          \":\",\n        ),\n        \" \",\n        em({},\n          \"Copied from the page template.\",\n        ),\n      ),\n      li({},\n        \"\",\n        strong({},\n          code({}, \"title\"),\n          \":\",\n        ),\n        \" \",\n        em({},\n          \"Copied from the page template.\",\n        ),\n      ),\n      li({},\n        \"\",\n        strong({},\n          code({}, \"url\"),\n          \":\",\n        ),\n        \" The URL at which the page is mounted.\",\n      ),\n    ),\n    p({},\n      a({\"href\": \"/api-reference#Page\"},\n        \"See all properties »\",\n      ),\n    ),\n  ),\n),\nh2({\"id\": \"Rendering-Content\"},\n  \"Rendering Content\",\n),\np({},\n  \"Now that your \",\n  code({}, \"App\"),\n  \" component receives a \",\n  code({}, \"junction\"),\n  \" prop, you can decide what to render by checking \",\n  code({}, \"this.props.junction.activeChild\"),\n  \".\",\n),\np({},\n  \"Keeping in mind that \",\n  code({}, \"activeChild\"),\n  \" may be \",\n  code({}, \"undefined\"),\n  \", your new App class may look something like this:\",\n),\ncodeBlock({\"className\": \"language-js\"}, \"<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">renderContent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> junction <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n\\n    <span class=\\\"token comment\\\">// If there is a currently selected page, get its component.</span>\\n    <span class=\\\"token comment\\\">// Use an uppercase `C` so the variable can be used in a JSX element.</span>\\n    <span class=\\\"token keyword\\\">let</span> Component <span class=\\\"token operator\\\">=</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>junction<span class=\\\"token punctuation\\\">.</span>activeChild <span class=\\\"token operator\\\">&amp;&amp;</span> \\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>junction<span class=\\\"token punctuation\\\">.</span>activeChild<span class=\\\"token punctuation\\\">.</span>component\\n    \\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// If the user enters an unknown URL, there will be no active child,</span>\\n      <span class=\\\"token comment\\\">// and thus no component.</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token number\\\">404</span><span class=\\\"token punctuation\\\">:</span> Page Not Found<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// Render the page's component, passing in the active Page object</span>\\n      <span class=\\\"token comment\\\">// as a prop.</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span> <span class=\\\"token attr-name\\\">page</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>junction<span class=\\\"token punctuation\\\">.</span>activeChild<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>App<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderContent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"),\np({},\n  \"Once you’ve made this change and saved the file, your site should display the index page’s content. And if you change the browser’s URL to \",\n  code({}, \"http://localhost:3000/api-reference\"),\n  \", the heading should change too.\",\n),\np({},\n  \"Did your app work as expected? If not, you’ll want to figure out what is wrong before continuing, as this step is crucial to making a working app.\",\n),\np({},\n  \"So does your app work? In that case, congratulations! You’ve built a working app with Junctions!\",\n),\nh2({\"id\": \"Links\"},\n  \"Links\",\n),\np({},\n  \"Because junctions produces static files, you \",\n  em({},\n    \"can\",\n  ),\n  \" create links with HTML \",\n  code({}, \"<a>\"),\n  \" tags. But they won’t be ideal.\",\n),\np({},\n  \"The thing about \",\n  code({}, \"<a>\"),\n  \" tags is that they’ll cause the browser to completely reload the page. For example, you can try clicking on the link below, which goes to the \",\n  em({},\n    \"Links\",\n  ),\n  \" heading above:\",\n),\np({},\n  code({}, \"<a href=\\\"/tutorial#Links\\\">\"),\n  createElement(\"a\", { href: \"/tutorial#Links\" },\n    \"Tutorial / Links\",\n  ),\n  code({}, \"</a>\"),\n),\np({},\n  \"When clicking this link, you may notice a flash of no content as the browser reloads the page. \",\n  createElement(\"small\", null,\n    \"(Or you might not, because Junctions generates ridiculously fast websites.)\",\n  ),\n),\np({},\n  \"To solve this, you can use the HTML5 History API’s \",\n  a({\"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method\"},\n    \"pushState\",\n  ),\n  \" method. This method changes the URL in the browser’s location bar, \",\n  em({},\n    \"without\",\n  ),\n  \" reloading the page.\",\n),\np({},\n  \"But writing your own \",\n  code({}, \"pushState\"),\n  \" code wouldn’t be much fun, which is why Junctions gives you a \",\n  code({}, \"<Link>\"),\n  \" component. This component behaves like \",\n  code({}, \"<a>\"),\n  \", but uses \",\n  code({}, \"pushState\"),\n  \" internally. Notice the speed difference when you click this link:\",\n),\np({},\n  code({}, \"<Link href=\\\"/tutorial#Links\\\">\"),\n  createElement(Link, { href: \"/tutorial#Links\" },\n    \"Tutorial / Links\",\n  ),\n  code({}, \"</Link>\"),\n),\nh3({\"id\": \"Let's-add-a-navbar\"},\n  \"Let’s add a navbar\",\n),\np({},\n  \"The navbar on the left of this page is chock-full of links. So let’s test out the \",\n  code({}, \"<Link>\"),\n  \" component by creating an unstyled \",\n  code({}, \"<Navbar>\"),\n  \":\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"<span class=\\\"token comment\\\">// src/Navbar.jsx</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Link <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-junctions'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Navbar</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>Navbar<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Link</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Junctions<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Link</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Link</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/api-reference<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>API Reference<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Link</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">></span></span>\\n\"),\np({},\n  \"Where should this \",\n  code({}, \"<Navbar>\"),\n  \" element be rendered from? One possibility would be to add it to each of your page’s components. But as the site grows, this would become painful.\",\n),\np({},\n  \"Instead, it makes sense to render the \",\n  code({}, \"<Navbar>\"),\n  \" element from the \",\n  code({}, \"<App>\"),\n  \" component, along with the current page. Here’s an example:\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Navbar <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Navbar'</span>\\n\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>App<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Navbar</span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>App-content<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderContent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"),\nh2({\"id\": \"Markdown-Components\"},\n  \"Markdown Components\",\n),\np({},\n  \"If you’re creating a documentation website, you’ll probably want to write your content in a plain-text format like \",\n  a({\"href\": \"https://daringfireball.net/projects/markdown/\"},\n    \"Markdown\",\n  ),\n  \". \",\n  createElement(\"small\", null,\n    \"HTML is great, but the 42nd time you have to type out <p> is just so…\",\n  ),\n),\np({},\n  \"The problem, of course, is that Junctions doesn’t expect plain-text content; it expects pages to provide a React Component.\",\n),\np({},\n  \"One possible solution would be to load your content as text, and render it with a component like \",\n  a({\"href\": \"https://github.com/acdlite/react-remarkable\"},\n    \"react-remarkable\",\n  ),\n  \". And while this works, it has one major problem: your links will be plain-old \",\n  code({}, \"<a>\"),\n  \" elements. And they’ll be \",\n  em({},\n    \"slow\",\n  ),\n  \".\",\n),\np({},\n  \"Instead, you’ll want to convert your Markdown directly into a React component with \",\n  code({}, \"<Link>\"),\n  \" elements for links. There are two ways to do this:\",\n),\nul({},\n  li({},\n    \"At runtime, using \",\n    a({\"href\": \"https://github.com/rexxars/react-markdown\"},\n      \"react-markdown\",\n    ),\n    \".\",\n  ),\n  li({},\n    \"At build time, using \",\n    a({\"href\": \"https://github.com/jamesknelson/mdx-loader\"},\n      \"mdx-loader\",\n    ),\n    \".\",\n  ),\n),\np({},\n  \"I recommend doing that conversion at build time, as it produces smaller builds, faster responses, and also allows you to import files and use JSX within your markdown. \",\n  createElement(\"small\", null,\n    \"Disclaimer: I created mdx-loader.\",\n  ),\n),\nh3({\"id\": \"Let's-add-a-Markdown-page\"},\n  \"Let’s add a Markdown page\",\n),\np({},\n  \"To start, you’ll need to add a couple packages to your project:\",\n),\ncodeBlock({\"className\": \"language-bash\"}, \"<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> --save-dev mdxc mdx-loader\\n\"),\np({},\n  \"You’ll also need to add this \",\n  code({}, \".babelrc\"),\n  \" to the root directory of your project:\",\n),\ncodeBlock({\"className\": \"language-json\"}, \"<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"presets\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"babel-preset-react-app\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"),\np({},\n  \"With this setup complete, you can now import Markdown files as if they were React components!\",\n),\nhr({}),\np({},\n  \"To test this out, you’ll first need a Markdown file. I like to place my site’s markdown files under a \",\n  code({}, \"src/content\"),\n  \" directory, so let’s add a \",\n  code({}, \"src/content/index.md\"),\n  \" file:\",\n),\ncodeBlock({\"className\": \"language-markdown\"}, \"<span class=\\\"token title important\\\">Junctions\\n<span class=\\\"token punctuation\\\">=========</span></span>\\n\\n<span class=\\\"token bold\\\"><span class=\\\"token punctuation\\\">**</span>A batteries-included router for React.<span class=\\\"token punctuation\\\">**</span></span>\\n\\n<span class=\\\"token title important\\\"><span class=\\\"token punctuation\\\">##</span> Documentation</span>\\n\\n<span class=\\\"token list punctuation\\\">-</span> <span class=\\\"token url\\\">[API Reference](/api-reference)</span>\\n\"),\np({},\n  \"You can then import the document as a React component by prefixing the filename with \",\n  code({}, \"!babel-loader!mdx-loader!\"),\n  \". This tells Webpack to run \",\n  code({}, \"index.md\"),\n  \" through MDX, and then Babel, before importing the resulting JavaScript.\",\n),\np({},\n  \"You’ll also need to tell eslint that it is ok to use the Webpack \",\n  code({}, \"!\"),\n  \" syntax; make sure that the following comment goes at the very top of your file!\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"<span class=\\\"token comment\\\">/* eslint-disable import/no-webpack-loader-syntax */</span>\\n<span class=\\\"token keyword\\\">import</span> IndexDocument <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'!babel-loader!mdx-loader!./content/index.md'</span>\\n\"),\np({},\n  \"Finally, set your index page’s \",\n  code({}, \"component\"),\n  \" property to \",\n  code({}, \"IndexDocument\"),\n  \" and refresh the page; you should see the contents of your new Markdown file!\",\n),\nh3({\"id\": \"Configuring-the-Markdown-link-component\"},\n  \"Configuring the Markdown link component\",\n),\np({},\n  \"By default, MDX uses vanilla \",\n  code({}, \"<a>\"),\n  \" tags for links – but we want to use \",\n  code({}, \"<Link>\"),\n  \" elements to improve performance.\",\n),\np({},\n  \"Luckily, MDX allows you to configure \",\n  a({\"href\": \"https://github.com/jamesknelson/mdxc#factories\"},\n    \"factories\",\n  ),\n  \" for each type of markup that it can produce. To do so, you just pass a \",\n  code({}, \"factories\"),\n  \" prop to the document component.\",\n),\np({},\n  \"For example, here’s how you’d create an \",\n  code({}, \"IndexDocumentWrapper\"),\n  \" component that renders its links as JSX \",\n  code({}, \"<Link>\"),\n  \" elements:\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"<span class=\\\"token comment\\\">// Define factories outside of the component, so that the factories aren't</span>\\n<span class=\\\"token comment\\\">// re-created each time the document renders</span>\\n<span class=\\\"token keyword\\\">let</span> factories <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>Link<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">IndexDocumentWrapper</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>IndexDocument</span> <span class=\\\"token attr-name\\\">factories</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>factories<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n\"),\np({},\n  \"By using \",\n  code({}, \"IndexDocumentWrapper\"),\n  \" as your index page \",\n  code({}, \"component\"),\n  \", you’ll ensure that the page’s links are just as snappy as any other links within your application.\",\n),\np({},\n  \"You can also use MDX factories to configure other behaviors. For example, you could use factories to add \",\n  code({}, \"#hash\"),\n  \" links to each of your document’s headings.\",\n),\np({},\n  \"But while factories give you flexibility, they’re also rather verbose. Creating a new wrapper component for each page would quickly get tiresome. But luckily, you don’t have to!\",\n),\nh2({\"id\": \"Split-Content\"},\n  \"Split Content\",\n),\np({},\n  \"Up until now, this tutorial has only used a subset of the available options for page templates. In fact, you can configure more than just a \",\n  code({}, \"title\"),\n  \" and a \",\n  code({}, \"component\"),\n  \"; you can see the full suite of options in the \",\n  a({\"href\": \"/api-reference/#createPageTemplate\"},\n    \"API Reference\",\n  ),\n  \".\",\n),\np({},\n  \"There is one option in particular that comes in handy: \",\n  code({}, \"getContent\"),\n  \". This option lets you specify a function that returns your content, or a \",\n  em({},\n    \"promise\",\n  ),\n  \" to your content. The function will then be called the first time the page is loaded.\",\n),\np({},\n  \"Your content can be anything – a text file, a React component, or even a module returned by ESNext’s proposed \",\n  code({}, \"import\"),\n  \" syntax. And once your content is available, it can be accessed by the page’s component under the \",\n  code({}, \"content\"),\n  \" property of your Page object.\",\n),\np({},\n  \"For example, here’s how you’d use \",\n  code({}, \"getContent\"),\n  \" and \",\n  code({}, \"import()\"),\n  \" to dynamically load a markdown file when the page is first accessed:\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"<span class=\\\"token function\\\">createPageTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Junctions API Reference'</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  getContent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token comment\\\">// `import()` returns a promise to an object with all of the module's</span>\\n    <span class=\\\"token comment\\\">// exports.</span>\\n    <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'!babel-loader!mdx-loader!./content/api-reference.md'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// When the import statement completes, the loaded module will be available</span>\\n  <span class=\\\"token comment\\\">// under `page.content`.</span>\\n  component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> page <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token operator\\\">!</span>page<span class=\\\"token punctuation\\\">.</span>content\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>Loading<span class=\\\"token operator\\\">...</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>page<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\"),\nh3({\"id\": \"Content-Wrapper-Components\"},\n  \"Content Wrapper Components\",\n),\np({},\n  \"Now that your page’s content has been separated from the component that renders it, it is possible to create a single Wrapper component that can be shared over all markdown pages.\",\n),\np({},\n  \"You have a lot of flexibility in how you implement this. You can add loading spinners, error messages, markdown factories, menus, and a bunch of other bits and pieces.\",\n),\np({},\n  \"For example, here’s a stripped-down version of the \",\n  a({\"href\": \"https://github.com/jamesknelson/junctions/blob/master/site/src/MDXWrapper.js\"},\n    \"wrapper component\",\n  ),\n  \" for this website. It makes use of the Page object’s \",\n  code({}, \"contentStatus\"),\n  \" property to give the user feedback on the content’s status.\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Link <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-junctions'</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">createHeadingFactory</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>\\n      type<span class=\\\"token punctuation\\\">,</span>\\n      props<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token comment\\\">// Append a hash link to each heading, which will be hidden via</span>\\n      <span class=\\\"token comment\\\">// CSS until he mouse hovers over the heading.</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Link</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>heading-link<span class=\\\"token punctuation\\\">'</span></span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'#'</span><span class=\\\"token operator\\\">+</span>props<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>#<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Link</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MarkdownWrapper</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  factories <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>Link<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    h1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">createHeadingFactory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    h2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">createHeadingFactory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    h3<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">createHeadingFactory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h3'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n \\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> page <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>page\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>MarkdownWrapper<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span> page<span class=\\\"token punctuation\\\">.</span>contentStatus <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'busy'</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>page-loading<span class=\\\"token punctuation\\\">'</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">{</span> page<span class=\\\"token punctuation\\\">.</span>contentStatus <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'ready'</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>page-ready<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>page<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n              factories<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>factories<span class=\\\"token punctuation\\\">,</span>\\n              page<span class=\\\"token punctuation\\\">:</span> page<span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">{</span> page<span class=\\\"token punctuation\\\">.</span>contentStatus <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'error'</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">className</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>page-error<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Gosh darn it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"),\np({},\n  \"Once you have a Markdown wrapper component, you can use it in a page template’s \",\n  code({}, \"component\"),\n  \" property:\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"<span class=\\\"token function\\\">createPageTemplate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Junctions API Reference'</span><span class=\\\"token punctuation\\\">,</span>\\n  component<span class=\\\"token punctuation\\\">:</span> MarkdownComponent<span class=\\\"token punctuation\\\">,</span>\\n  getContent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'!babel-loader!mdx-loader!./content/api-reference.md'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\"),\np({},\n  \"Congratulations on getting this far through the tutorial! By now, you’ve learned everything you need to re-create this website – at least within create-react-app’s development server!\",\n),\np({},\n  \"The only thing left to do is to turn your site into a production-ready static website!\",\n),\nh2({\"id\": \"Static-Builds\"},\n  \"Static Builds\",\n),\np({},\n  \"To create a static website from a junctions app, you’ll first need to add the \",\n  code({}, \"junctions-static\"),\n  \" package to your app:\",\n),\ncodeBlock({\"className\": \"language-bash\"}, \"<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> --save-dev junctions-static\\n\"),\np({},\n  \"This package includes a command-line tool that loads the output of CRA’s \",\n  code({}, \"build\"),\n  \" script, then walks through each junction template’s children to find your app’s URLs.\",\n),\np({},\n  \"You can call the command line tool manually, by I recommend adding it to the end of the \",\n  code({}, \"build\"),\n  \" script in \",\n  code({}, \"package.json\"),\n  \". Here’s what the resulting line will look like:\",\n),\ncodeBlock({\"className\": \"language-json\"}, \"<span class=\\\"token property\\\">\\\"build\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"react-scripts build &amp;&amp; junctions-static build -m build/static/js/main.*.js -r create-react-app\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\"),\nh3({\"id\": \"Changes-to-index.js\"},\n  \"Changes to \",\n  code({}, \"index.js\"),\n),\np({},\n  \"To get the static build working, you’ll need to make some changes to your app’s entry point. Here’s an example of a modified \",\n  code({}, \"index.js\"),\n  \"; I’ll go through the changes one-by-one after the code listing.\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> content <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>JunctionNavigation</span>\\n      <span class=\\\"token attr-name\\\">root</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>AppJunctionTemplate<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token attr-name\\\">waitForInitialContent</span>\\n    <span class=\\\"token punctuation\\\">/></span></span>\\n\\n  <span class=\\\"token keyword\\\">let</span> node <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>NODE_ENV <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'production'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hydrate</span><span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>NODE_ENV <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'production'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">registerServiceWorker</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nwindow<span class=\\\"token punctuation\\\">.</span>JunctionsStaticApp <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  root<span class=\\\"token punctuation\\\">:</span> AppJunctionTemplate<span class=\\\"token punctuation\\\">,</span>\\n  main<span class=\\\"token punctuation\\\">:</span> main\\n<span class=\\\"token punctuation\\\">}</span>\\n\"),\nh4({\"id\": \"1.-Add-a-main-function\"},\n  \"1. Add a \",\n  code({}, \"main\"),\n  \" function\",\n),\np({},\n  \"Because junctions-static loads your app from a Node environment, you won’t want your app to follow its normal boot process in a static build.\",\n),\np({},\n  \"To solve this, I recommend moving the contents of \",\n  code({}, \"index.js\"),\n  \" into a \",\n  code({}, \"main()\"),\n  \" function, and only calling that function when running from CRA’s development server.\",\n),\ncodeBlock({\"className\": \"language-js\"}, \"<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>NODE_ENV <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'production'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">registerServiceWorker</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"),\nh4({\"id\": \"2.-Call-ReactDOM.hydrate-in-production\"},\n  \"2. Call \",\n  code({}, \"ReactDOM.hydrate\"),\n  \" in production\",\n),\np({},\n  \"This method is just like \",\n  code({}, \"ReactDOM.render\"),\n  \", but it lets React know that the\",\n  \"content has been statically rendered, and is already available in the DOM.\",\n),\ncodeBlock({\"className\": \"language-js\"}, \"ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hydrate</span><span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span>\\n\"),\nh4({\"id\": \"3.-Export-your-root-junction-template-and-main()-function\"},\n  \"3. Export your root junction template and \",\n  code({}, \"main()\"),\n  \" function\",\n),\np({},\n  \"Junctions-static can’t find your application’s junctions unless you tell it where they are. Likewise, it can’t call the \",\n  code({}, \"main()\"),\n  \" function unless it has access to it.\",\n),\np({},\n  \"To solve this, you’ll need to export your junction template and \",\n  code({}, \"main\"),\n  \" function by adding them to the global \",\n  code({}, \"window\"),\n  \" object.\",\n),\ncodeBlock({\"className\": \"language-js\"}, \"window<span class=\\\"token punctuation\\\">.</span>JunctionsStaticApp <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  root<span class=\\\"token punctuation\\\">:</span> AppJunctionTemplate<span class=\\\"token punctuation\\\">,</span>\\n  main<span class=\\\"token punctuation\\\">:</span> main\\n<span class=\\\"token punctuation\\\">}</span>\\n\"),\nh4({\"id\": \"4.-Add-the-waitForInitialContent-prop-to-JunctionNavigation\"},\n  \"4. Add the \",\n  code({}, \"waitForInitialContent\"),\n  \" prop to \",\n  code({}, \"<JunctionNavigation>\"),\n),\np({},\n  \"This prop tells Junctions to wait for your initial page’s content promise to resolve before rendering any content. This ensures that you don’t see a loading message while the first page is loading.\",\n),\ncodeBlock({\"className\": \"language-jsx\"}, \"<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>JunctionNavigation</span>\\n  <span class=\\\"token attr-name\\\">root</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>AppJunctionTemplate<span class=\\\"token punctuation\\\">}</span></span>\\n  <span class=\\\"token attr-name\\\">waitForInitialContent</span>\\n<span class=\\\"token punctuation\\\">/></span></span>\\n\"),\nh3({\"id\": \"Congratulations!\"},\n  \"Congratulations!\",\n),\np({},\n  \"With these changes, your build should now work! To test it out, just run:\",\n),\ncodeBlock({\"className\": \"language-bash\"}, \"<span class=\\\"token function\\\">npm</span> run build\\n\"),\np({},\n  \"And then follow CRA’s instructions to start a build server!\",\n),\np({},\n  \"There’s just one thing left to do. If you open your site in a browser, Junctions will update the document title to “Junctions”… but not before flashing CRA’s default title for a split second.\",\n),\np({},\n  \"To makes sure that each of your page’s files has the correct title, change the \",\n  code({}, \"<title>\"),\n  \" line in \",\n  code({}, \"public/index.html\"),\n  \" to the following:\",\n),\ncodeBlock({\"className\": \"language-html\"}, \"<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>%PAGE_TITLE%<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n\"),\np({},\n  \"In fact, if you add a \",\n  code({}, \"meta\"),\n  \" property to your page templates, you’ll be able to access any of its values using the \",\n  code({}, \"%template%\"),\n  \" syntax within \",\n  code({}, \"index.html\"),\n  \". You can see this in action in \",\n  a({\"href\": \"https://github.com/jamesknelson/junctions/blob/master/site/public/index.html\"},\n    \"the source\",\n  ),\n  \" for this site’s \",\n  code({}, \"index.html\"),\n  \".\",\n),\np({},\n  \"And with that, you’re ready to start building sites with junctions. Congratulations!\",\n)\n\n  )\n}\n\nexport const meta = {}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/tutorial.md"],"sourceRoot":""}