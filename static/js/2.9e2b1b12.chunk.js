webpackJsonp([2],{73:function(n,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),s.d(a,"meta",function(){return o});var t=s(0),e=(s.n(t),s(4));a.default=function(n){var a=n.factories,s=void 0===a?{}:a,o=s.wrapper,p=void 0===o?Object(t.createFactory)("div"):o,c=s.a,l=void 0===c?Object(t.createFactory)("a"):c,i=s.code,u=void 0===i?Object(t.createFactory)("code"):i,r=s.codeBlock,k=void 0===r?function(n,a){return Object(t.createElement)("pre",n,Object(t.createElement)("code",{dangerouslySetInnerHTML:{__html:a||n.children}}))}:r,d=s.em,h=void 0===d?Object(t.createFactory)("em"):d,m=s.h1,g=void 0===m?Object(t.createFactory)("h1"):m,f=s.h2,y=void 0===f?Object(t.createFactory)("h2"):f,w=s.h3,b=void 0===w?Object(t.createFactory)("h3"):w,v=s.h4,j=void 0===v?Object(t.createFactory)("h4"):v,x=s.hr,T=void 0===x?Object(t.createFactory)("hr"):x,N=s.li,J=void 0===N?Object(t.createFactory)("li"):N,C=s.ol,R=void 0===C?Object(t.createFactory)("ol"):C,A=s.p,L=void 0===A?Object(t.createFactory)("p"):A,I=s.strong,O=void 0===I?Object(t.createFactory)("strong"):I,M=s.ul,E=void 0===M?Object(t.createFactory)("ul"):M;return p({},g({id:"Junctions-Tutorial:-Make-this-site"},"Junctions Tutorial: Make this site"),L({},"This tutorial will walk you through creating a small documentation website using create-react-app, react-junctions, and Markdown. In fact, it\u2019ll actually walk you through creating ",h({},"this")," website. Cool, huh?"),L({},h({},"You can see the end result of this tutorial at its ",l({href:"https://github.com/jamesknelson/junctions-tutorial"},"companion repository"),". If you get stuck, try comparing your code to this repo.")),y({id:"Creating-a-react-app"},"Creating a react app"),L({},"Let\u2019s start out by installing create-react-app and react-junctions, and spinning up a fresh project:"),k({className:"language-bash"},'<span class="token comment"># Install the create-react-app command-line tool</span>\n<span class="token function">npm</span> <span class="token function">install</span> -g create-react-app\n\n<span class="token comment"># Create a new project under the `junctions-tutorial` directory</span>\ncreate-react-app junctions-tutorial\n<span class="token function">cd</span> junctions-tutorial\n\n<span class="token comment"># Install junctions and react-junctions</span>\n<span class="token function">npm</span> <span class="token function">install</span> --save junctions react-junctions\n\n<span class="token comment"># Start a development server at http://localhost:3000</span>\n<span class="token function">npm</span> run start\n'),L({},"If all has gone well, this should have created a few files for you, and opened a browser window with a spinning React logo. So far, so good."),L({},"Now, we just need to add some templates!"),y({id:"Templates"},"Templates"),L({},"In a junctions-based app, ",O({},"templates")," are the objects that define your app\u2019s URL structure. Here\u2019s an example:"),k({className:"language-jsx"},'<span class="token keyword">let</span> ReadmeTemplate <span class="token operator">=</span> <span class="token function">createPageTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token punctuation">:</span> <span class="token string">\'Junctions\'</span><span class="token punctuation">,</span>\n  component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Junctions README<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Blah blah blah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n'),L({},"There are three types of templates:"),E({},J({},"",O({},"Page templates")," define the pages that users can visit."),J({},"",O({},"Redirect templates")," specify redirects between URLs."),J({},"",O({},"Junction templates")," map URL parts to pages, redirects, and/or more junctions.")),b({id:"Let's-add-a-template"},"Let\u2019s add a template"),L({},"At the root of every app, you\u2019ll need a ",u({},"JunctionTemplate")," that maps URLs to content. So let\u2019s add one."),L({},"You\u2019ll want to add it to ",u({},"App.js"),"; the root React component lives there, so it makes sense that the root ",u({},"JunctionTemplate")," will too."),k({className:"language-js"},'<span class="token keyword">import</span> <span class="token punctuation">{</span> createJunctionTemplate<span class="token punctuation">,</span> createPageTemplate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'junctions\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> AppJunctionTemplate <span class="token operator">=</span> <span class="token function">createJunctionTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  children<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">\'/\'</span><span class="token punctuation">:</span> <span class="token function">createPageTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      title<span class="token punctuation">:</span> <span class="token string">\'Junctions\'</span><span class="token punctuation">,</span>\n      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Junctions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n    <span class="token string">\'/api-reference\'</span><span class="token punctuation">:</span> <span class="token function">createPageTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      title<span class="token punctuation">:</span> <span class="token string">\'Junctions API Reference\'</span><span class="token punctuation">,</span>\n      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Junctions API Reference<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  component<span class="token punctuation">:</span> App<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n'),L({},"This junction template says a few things:"),R({},J({},"The app has two URLs: ",u({},"/api-reference"),", and ",u({},"/")," (the root URL)"),J({},"The ",u({},"App")," component will be used to render these URLs"),J({},"The two pages have titles, and should be rendered with the specified components.")),Object(t.createElement)("aside",null,p({},j({id:'Why-call-them-"templates"-and-not-just-"pages"-or-"junctions"'},"Why call them \u201ctemplates\u201d, and not just \u201cpages\u201d or \u201cjunctions\u201d?"),L({},"Each time the browser\u2019s location changes, your templates are used to create new ",l({href:"/api-reference/#Page"},"Page")," and ",l({href:"/api-reference/#Junction"},"Junction")," objects. These contain information that can\u2019t be set ahead of time in the templates, including a Page\u2019s current URL, or a Junction\u2019s active child."))),L({},"Now that you\u2019ve defined ",u({},"AppJunctionTemplate"),", your app has the information it needs to render different content for different URLs. But how do you ",h({},"use")," this information?"),y({id:"The-JunctionNavigation-Component"},"The ",u({},"<JunctionNavigation>")," Component"),L({},"The ",u({},"<JunctionNavigation root={JunctionTemplate}>")," component keeps track of the browser\u2019s current location, rendering the root junction\u2019s component whenever the URL changes."),L({},"If you\u2019re familiar with react-router, this is a bit like the ",u({},"<Router>")," ",Object(t.createElement)("small",null,"(v3)")," or ",u({},"<BrowserRouter>")," ",Object(t.createElement)("small",null,"(v4)")," component. The main difference is that ",u({},"<JunctionNavigation>")," also does a bit of housekeeping \u2013 managing the document title, scrolling to ",u({},"#hash")," links, and keeping track of code splits."),b({id:"Let's-add-a-JunctionNavigation"},"Let\u2019s add a ",u({},"<JunctionNavigation>")),L({},"By default, create-react-app starts the app by rendering an ",u({},"<App>")," element in ",u({},"index.js"),":"),k({className:"language-jsx"},'ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n'),L({},"You\u2019ll want to replace this ",u({},"<App>")," element with a ",u({},"<JunctionNavigation>")," element, passing in ",u({},"AppJunctionTemplate")," from the previous step as its ",u({},"root")," prop:"),k({className:"language-jsx"},'<span class="token keyword">import</span> <span class="token punctuation">{</span> JunctionNavigation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-junctions\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppJunctionTemplate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./App\'</span>\n\n<span class="token comment">// Instead of rendering `&lt;App>` directly, it will be rendered by</span>\n<span class="token comment">// `&lt;JunctionNavigation>`.</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>JunctionNavigation</span> <span class="token attr-name">root</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>AppJunctionTemplate<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n'),L({},"Go ahead - try making this change if you haven\u2019t already. Once you\u2019ve saved the file, create-react-app\u2019s development server should automatically reload the page, and you should still see a spinning React logo."),L({},h({},"But you shouldn\u2019t see any change in the content!")),L({},"The thing is, ",u({},"<JunctionNavigation>")," is just rendering ",u({},"<App>"),". And we haven\u2019t changed touched the ",u({},"App")," class yet, so nothing ",h({},"visible")," has changed."),L({},"But one thing has changed: the ",u({},"<App>")," component is now receiving a ",u({},"junction")," prop."),y({id:"Junctions-and-Pages"},"Junctions and Pages"),L({},"When your ",u({},"<JunctionNavigation>")," component renders the ",u({},"<App>")," component, it passes it a ",u({},"junction")," prop. This prop contains the navigation state for your entire app, and looks a little like this:"),Object(t.createElement)("div",{className:"properties"},p({},j({id:"Junction"},u({},"Junction")),E({},J({},"",O({},u({},"activeChild"),":")," Holds a ",u({},"Page")," object, based on the active child from the junction\u2019s ",u({},"children")," \u2013 or ",u({},"undefined")," if there is no active child."),J({},"",O({},u({},"children"),":")," ",h({},"Copied from the junction template.")),J({},"",O({},u({},"component"),":")," ",h({},"Copied from the junction template.")),J({},"",O({},u({},"status"),":")," Either ",u({},'"ready"'),", or ",u({},'"notfound"'),".")),L({},l({href:"/api-reference#Junction"},"See all properties \xbb")))),L({},"Each ",u({},"Junction")," object is based on one of your Junction Templates, but has extra properties that are derived from the browser\u2019s current URL \u2013 including ",u({},"status")," and ",u({},"activeChild"),"."),L({},"The ",u({},"activeChild")," property is particularly important; it contains a ",u({},"Page")," object, with details on whichever page is selected by the current URL:"),Object(t.createElement)("div",{className:"properties"},p({},j({id:"Page"},u({},"Page")),E({},J({},"",O({},u({},"component"),":")," ",h({},"Copied from the page template.")),J({},"",O({},u({},"title"),":")," ",h({},"Copied from the page template.")),J({},"",O({},u({},"url"),":")," The URL at which the page is mounted.")),L({},l({href:"/api-reference#Page"},"See all properties \xbb")))),y({id:"Rendering-Content"},"Rendering Content"),L({},"Now that your ",u({},"App")," component receives a ",u({},"junction")," prop, you can decide what to render by checking ",u({},"this.props.junction.activeChild"),"."),L({},"Keeping in mind that ",u({},"activeChild")," may be ",u({},"undefined"),", your new App class may look something like this:"),k({className:"language-js"},'<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">renderContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span> junction <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props\n\n    <span class="token comment">// If there is a currently selected page, get its component.</span>\n    <span class="token comment">// Use an uppercase `C` so the variable can be used in a JSX element.</span>\n    <span class="token keyword">let</span> Component <span class="token operator">=</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>junction<span class="token punctuation">.</span>activeChild <span class="token operator">&amp;&amp;</span> \n      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>junction<span class="token punctuation">.</span>activeChild<span class="token punctuation">.</span>component\n    \n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// If the user enters an unknown URL, there will be no active child,</span>\n      <span class="token comment">// and thus no component.</span>\n      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token number">404</span><span class="token punctuation">:</span> Page Not Found<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Render the page\'s component, passing in the active Page object</span>\n      <span class="token comment">// as a prop.</span>\n      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name">page</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>junction<span class="token punctuation">.</span>activeChild<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>App<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n'),L({},"Once you\u2019ve made this change and saved the file, your site should display the index page\u2019s content. And if you change the browser\u2019s URL to ",u({},"http://localhost:3000/api-reference"),", the heading should change too."),L({},"Did your app work as expected? If not, you\u2019ll want to figure out what is wrong before continuing, as this step is crucial to making a working app."),L({},"So does your app work? In that case, congratulations! You\u2019ve built a working app with Junctions!"),y({id:"Links"},"Links"),L({},"Because junctions produces static files, you ",h({},"can")," create links with HTML ",u({},"<a>")," tags. But they won\u2019t be ideal."),L({},"The thing about ",u({},"<a>")," tags is that they\u2019ll cause the browser to completely reload the page. For example, you can try clicking on the link below, which goes to the ",h({},"Links")," heading above:"),L({},u({},'<a href="/tutorial#Links">'),Object(t.createElement)("a",{href:"/tutorial#Links"},"Tutorial / Links"),u({},"</a>")),L({},"When clicking this link, you may notice a flash of no content as the browser reloads the page. ",Object(t.createElement)("small",null,"(Or you might not, because Junctions generates ridiculously fast websites.)")),L({},"To solve this, you can use the HTML5 History API\u2019s ",l({href:"https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method"},"pushState")," method. This method changes the URL in the browser\u2019s location bar, ",h({},"without")," reloading the page."),L({},"But writing your own ",u({},"pushState")," code wouldn\u2019t be much fun, which is why Junctions gives you a ",u({},"<Link>")," component. This component behaves like ",u({},"<a>"),", but uses ",u({},"pushState")," internally. Notice the speed difference when you click this link:"),L({},u({},'<Link href="/tutorial#Links">'),Object(t.createElement)(e.c,{href:"/tutorial#Links"},"Tutorial / Links"),u({},"</Link>")),b({id:"Let's-add-a-navbar"},"Let\u2019s add a navbar"),L({},"The navbar on the left of this page is chock-full of links. So let\u2019s test out the ",u({},"<Link>")," component by creating an unstyled ",u({},"<Navbar>"),":"),k({className:"language-jsx"},'<span class="token comment">// src/Navbar.jsx</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-junctions\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Navbar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Navbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Junctions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/api-reference<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>API Reference<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n'),L({},"Where should this ",u({},"<Navbar>")," element be rendered from? One possibility would be to add it to each of your page\u2019s components. But as the site grows, this would become painful."),L({},"Instead, it makes sense to render the ",u({},"<Navbar>")," element from the ",u({},"<App>")," component, along with the current page. Here\u2019s an example:"),k({className:"language-jsx"},'<span class="token keyword">import</span> <span class="token punctuation">{</span> Navbar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./Navbar\'</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>App<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Navbar</span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>App-content<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n'),y({id:"Markdown-Components"},"Markdown Components"),L({},"If you\u2019re creating a documentation website, you\u2019ll probably want to write your content in a plain-text format like ",l({href:"https://daringfireball.net/projects/markdown/"},"Markdown"),". ",Object(t.createElement)("small",null,"HTML is great, but the 42nd time you have to type out <p> is just so\u2026")),L({},"The problem, of course, is that Junctions doesn\u2019t expect plain-text content; it expects pages to provide a React Component."),L({},"One possible solution would be to load your content as text, and render it with a component like ",l({href:"https://github.com/acdlite/react-remarkable"},"react-remarkable"),". And while this works, it has one major problem: your links will be plain-old ",u({},"<a>")," elements. And they\u2019ll be ",h({},"slow"),"."),L({},"Instead, you\u2019ll want to convert your Markdown directly into a React component with ",u({},"<Link>")," elements for links. There are two ways to do this:"),E({},J({},"At runtime, using ",l({href:"https://github.com/rexxars/react-markdown"},"react-markdown"),"."),J({},"At build time, using ",l({href:"https://github.com/jamesknelson/mdx-loader"},"mdx-loader"),".")),L({},"I recommend doing that conversion at build time, as it produces smaller builds, faster responses, and also allows you to import files and use JSX within your markdown. ",Object(t.createElement)("small",null,"Disclaimer: I created mdx-loader.")),b({id:"Let's-add-a-Markdown-page"},"Let\u2019s add a Markdown page"),L({},"To start, you\u2019ll need to add a couple packages to your project:"),k({className:"language-bash"},'<span class="token function">npm</span> <span class="token function">install</span> --save-dev mdxc mdx-loader\n'),L({},"You\u2019ll also need to add this ",u({},".babelrc")," to the root directory of your project:"),k({className:"language-json"},'<span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"babel-preset-react-app"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n'),L({},"With this setup complete, you can now import Markdown files as if they were React components!"),T({}),L({},"To test this out, you\u2019ll first need a Markdown file. I like to place my site\u2019s markdown files under a ",u({},"src/content")," directory, so let\u2019s add a ",u({},"src/content/index.md")," file:"),k({className:"language-markdown"},'<span class="token title important">Junctions\n<span class="token punctuation">=========</span></span>\n\n<span class="token bold"><span class="token punctuation">**</span>A batteries-included router for React.<span class="token punctuation">**</span></span>\n\n<span class="token title important"><span class="token punctuation">##</span> Documentation</span>\n\n<span class="token list punctuation">-</span> <span class="token url">[API Reference](/api-reference)</span>\n'),L({},"You can then import the document as a React component by prefixing the filename with ",u({},"!babel-loader!mdx-loader!"),". This tells Webpack to run ",u({},"index.md")," through MDX, and then Babel, before importing the resulting JavaScript."),L({},"You\u2019ll also need to tell eslint that it is ok to use the Webpack ",u({},"!")," syntax; make sure that the following comment goes at the very top of your file!"),k({className:"language-jsx"},'<span class="token comment">/* eslint-disable import/no-webpack-loader-syntax */</span>\n<span class="token keyword">import</span> IndexDocument <span class="token keyword">from</span> <span class="token string">\'!babel-loader!mdx-loader!./content/index.md\'</span>\n'),L({},"Finally, set your index page\u2019s ",u({},"component")," property to ",u({},"IndexDocument")," and refresh the page; you should see the contents of your new Markdown file!"),b({id:"Configuring-the-Markdown-link-component"},"Configuring the Markdown link component"),L({},"By default, MDX uses vanilla ",u({},"<a>")," tags for links \u2013 but we want to use ",u({},"<Link>")," elements to improve performance."),L({},"Luckily, MDX allows you to configure ",l({href:"https://github.com/jamesknelson/mdxc#factories"},"factories")," for each type of markup that it can produce. To do so, you just pass a ",u({},"factories")," prop to the document component."),L({},"For example, here\u2019s how you\u2019d create an ",u({},"IndexDocumentWrapper")," component that renders its links as JSX ",u({},"<Link>")," elements:"),k({className:"language-jsx"},'<span class="token comment">// Define factories outside of the component, so that the factories aren\'t</span>\n<span class="token comment">// re-created each time the document renders</span>\n<span class="token keyword">let</span> factories <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>children<span class="token punctuation">)</span> <span class="token operator">=></span>\n    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>Link<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>children<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">IndexDocumentWrapper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IndexDocument</span> <span class="token attr-name">factories</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>factories<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n'),L({},"By using ",u({},"IndexDocumentWrapper")," as your index page ",u({},"component"),", you\u2019ll ensure that the page\u2019s links are just as snappy as any other links within your application."),L({},"You can also use MDX factories to configure other behaviors. For example, you could use factories to add ",u({},"#hash")," links to each of your document\u2019s headings."),L({},"But while factories give you flexibility, they\u2019re also rather verbose. Creating a new wrapper component for each page would quickly get tiresome. But luckily, you don\u2019t have to!"),y({id:"Split-Content"},"Split Content"),L({},"Up until now, this tutorial has only used a subset of the available options for page templates. In fact, you can configure more than just a ",u({},"title")," and a ",u({},"component"),"; you can see the full suite of options in the ",l({href:"/api-reference/#createPageTemplate"},"API Reference"),"."),L({},"There is one option in particular that comes in handy: ",u({},"getContent"),". This option lets you specify a function that returns your content, or a ",h({},"promise")," to your content. The function will then be called the first time the page is loaded."),L({},"Your content can be anything \u2013 a text file, a React component, or even a module returned by ESNext\u2019s proposed ",u({},"import")," syntax. And once your content is available, it can be accessed by the page\u2019s component under the ",u({},"content")," property of your Page object."),L({},"For example, here\u2019s how you\u2019d use ",u({},"getContent")," and ",u({},"import()")," to dynamically load a markdown file when the page is first accessed:"),k({className:"language-jsx"},'<span class="token function">createPageTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token punctuation">:</span> <span class="token string">\'Junctions API Reference\'</span><span class="token punctuation">,</span>\n\n  getContent<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    <span class="token comment">// `import()` returns a promise to an object with all of the module\'s</span>\n    <span class="token comment">// exports.</span>\n    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'!babel-loader!mdx-loader!./content/api-reference.md\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// When the import statement completes, the loaded module will be available</span>\n  <span class="token comment">// under `page.content`.</span>\n  component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    <span class="token operator">!</span>page<span class="token punctuation">.</span>content\n      <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Loading<span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n'),b({id:"Content-Wrapper-Components"},"Content Wrapper Components"),L({},"Now that your page\u2019s content has been separated from the component that renders it, it is possible to create a single Wrapper component that can be shared over all markdown pages."),L({},"You have a lot of flexibility in how you implement this. You can add loading spinners, error messages, markdown factories, menus, and a bunch of other bits and pieces."),L({},"For example, here\u2019s a stripped-down version of the ",l({href:"https://github.com/jamesknelson/junctions/blob/master/site/src/MDXWrapper.js"},"wrapper component")," for this website. It makes use of the Page object\u2019s ",u({},"contentStatus")," property to give the user feedback on the content\u2019s status."),k({className:"language-jsx"},'<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-junctions\'</span>\n\n<span class="token keyword">function</span> <span class="token function">createHeadingFactory</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>children<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>\n      type<span class="token punctuation">,</span>\n      props<span class="token punctuation">,</span>\n      <span class="token operator">...</span>children<span class="token punctuation">,</span>\n      <span class="token comment">// Append a hash link to each heading, which will be hidden via</span>\n      <span class="token comment">// CSS until he mouse hovers over the heading.</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>heading-link<span class="token punctuation">\'</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'#\'</span><span class="token operator">+</span>props<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>#<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MarkdownWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  factories <span class="token operator">=</span> <span class="token punctuation">{</span>\n    a<span class="token punctuation">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>children<span class="token punctuation">)</span> <span class="token operator">=></span>\n      React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>Link<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>children<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n    h1<span class="token punctuation">:</span> <span class="token function">createHeadingFactory</span><span class="token punctuation">(</span><span class="token string">\'h1\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    h2<span class="token punctuation">:</span> <span class="token function">createHeadingFactory</span><span class="token punctuation">(</span><span class="token string">\'h2\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    h3<span class="token punctuation">:</span> <span class="token function">createHeadingFactory</span><span class="token punctuation">(</span><span class="token string">\'h3\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n \n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>page\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>MarkdownWrapper<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span> page<span class="token punctuation">.</span>contentStatus <span class="token operator">===</span> <span class="token string">\'busy\'</span> <span class="token operator">&amp;&amp;</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>page-loading<span class="token punctuation">\'</span></span> <span class="token punctuation">/></span></span>\n        <span class="token punctuation">}</span>\n        <span class="token punctuation">{</span> page<span class="token punctuation">.</span>contentStatus <span class="token operator">===</span> <span class="token string">\'ready\'</span> <span class="token operator">&amp;&amp;</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>page-ready<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span>\n            <span class="token punctuation">{</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n              factories<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factories<span class="token punctuation">,</span>\n              page<span class="token punctuation">:</span> page<span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">}</span>\n        <span class="token punctuation">{</span> page<span class="token punctuation">.</span>contentStatus <span class="token operator">===</span> <span class="token string">\'error\'</span> <span class="token operator">&amp;&amp;</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>page-error<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Gosh darn it<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n'),L({},"Once you have a Markdown wrapper component, you can use it in a page template\u2019s ",u({},"component")," property:"),k({className:"language-jsx"},'<span class="token function">createPageTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token punctuation">:</span> <span class="token string">\'Junctions API Reference\'</span><span class="token punctuation">,</span>\n  component<span class="token punctuation">:</span> MarkdownComponent<span class="token punctuation">,</span>\n  getContent<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'!babel-loader!mdx-loader!./content/api-reference.md\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n'),L({},"Congratulations on getting this far through the tutorial! By now, you\u2019ve learned everything you need to re-create this website \u2013 at least within create-react-app\u2019s development server!"),L({},"The only thing left to do is to turn your site into a production-ready static website!"),y({id:"Static-Builds"},"Static Builds"),L({},"To create a static website from a junctions app, you\u2019ll first need to add the ",u({},"junctions-static")," package to your app:"),k({className:"language-bash"},'<span class="token function">npm</span> <span class="token function">install</span> --save-dev junctions-static\n'),L({},"This package includes a command-line tool that loads the output of CRA\u2019s ",u({},"build")," script, then walks through each junction template\u2019s children to find your app\u2019s URLs."),L({},"You can call the command line tool manually, by I recommend adding it to the end of the ",u({},"build")," script in ",u({},"package.json"),". Here\u2019s what the resulting line will look like:"),k({className:"language-json"},'<span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build &amp;&amp; junctions-static build -m build/static/js/main.*.js -r create-react-app"</span><span class="token punctuation">,</span>\n'),b({id:"Changes-to-index.js"},"Changes to ",u({},"index.js")),L({},"To get the static build working, you\u2019ll need to make some changes to your app\u2019s entry point. Here\u2019s an example of a modified ",u({},"index.js"),"; I\u2019ll go through the changes one-by-one after the code listing."),k({className:"language-jsx"},'<span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> content <span class="token operator">=</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>JunctionNavigation</span>\n      <span class="token attr-name">root</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>AppJunctionTemplate<span class="token punctuation">}</span></span>\n      <span class="token attr-name">waitForInitialContent</span>\n    <span class="token punctuation">/></span></span>\n\n  <span class="token keyword">let</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ReactDOM<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> node<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> node<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">registerServiceWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nwindow<span class="token punctuation">.</span>JunctionsStaticApp <span class="token operator">=</span> <span class="token punctuation">{</span>\n  root<span class="token punctuation">:</span> AppJunctionTemplate<span class="token punctuation">,</span>\n  main<span class="token punctuation">:</span> main\n<span class="token punctuation">}</span>\n'),j({id:"1.-Add-a-main-function"},"1. Add a ",u({},"main")," function"),L({},"Because junctions-static loads your app from a Node environment, you won\u2019t want your app to follow its normal boot process in a static build."),L({},"To solve this, I recommend moving the contents of ",u({},"index.js")," into a ",u({},"main()")," function, and only calling that function when running from CRA\u2019s development server."),k({className:"language-js"},'<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">registerServiceWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n'),j({id:"2.-Call-ReactDOM.hydrate-in-production"},"2. Call ",u({},"ReactDOM.hydrate")," in production"),L({},"This method is just like ",u({},"ReactDOM.render"),", but it lets React know that the","content has been statically rendered, and is already available in the DOM."),k({className:"language-js"},'ReactDOM<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> node<span class="token punctuation">)</span>\n'),j({id:"3.-Export-your-root-junction-template-and-main()-function"},"3. Export your root junction template and ",u({},"main()")," function"),L({},"Junctions-static can\u2019t find your application\u2019s junctions unless you tell it where they are. Likewise, it can\u2019t call the ",u({},"main()")," function unless it has access to it."),L({},"To solve this, you\u2019ll need to export your junction template and ",u({},"main")," function by adding them to the global ",u({},"window")," object."),k({className:"language-js"},'window<span class="token punctuation">.</span>JunctionsStaticApp <span class="token operator">=</span> <span class="token punctuation">{</span>\n  root<span class="token punctuation">:</span> AppJunctionTemplate<span class="token punctuation">,</span>\n  main<span class="token punctuation">:</span> main\n<span class="token punctuation">}</span>\n'),j({id:"4.-Add-the-waitForInitialContent-prop-to-JunctionNavigation"},"4. Add the ",u({},"waitForInitialContent")," prop to ",u({},"<JunctionNavigation>")),L({},"This prop tells Junctions to wait for your initial page\u2019s content promise to resolve before rendering any content. This ensures that you don\u2019t see a loading message while the first page is loading."),k({className:"language-jsx"},'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>JunctionNavigation</span>\n  <span class="token attr-name">root</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>AppJunctionTemplate<span class="token punctuation">}</span></span>\n  <span class="token attr-name">waitForInitialContent</span>\n<span class="token punctuation">/></span></span>\n'),b({id:"Congratulations!"},"Congratulations!"),L({},"With these changes, your build should now work! To test it out, just run:"),k({className:"language-bash"},'<span class="token function">npm</span> run build\n'),L({},"And then follow CRA\u2019s instructions to start a build server!"),L({},"There\u2019s just one thing left to do. If you open your site in a browser, Junctions will update the document title to \u201cJunctions\u201d\u2026 but not before flashing CRA\u2019s default title for a split second."),L({},"To makes sure that each of your page\u2019s files has the correct title, change the ",u({},"<title>")," line in ",u({},"public/index.html")," to the following:"),k({className:"language-html"},'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>%PAGE_TITLE%<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n'),L({},"In fact, if you add a ",u({},"meta")," property to your page templates, you\u2019ll be able to access any of its values using the ",u({},"%template%")," syntax within ",u({},"index.html"),". You can see this in action in ",l({href:"https://github.com/jamesknelson/junctions/blob/master/site/public/index.html"},"the source")," for this site\u2019s ",u({},"index.html"),"."),L({},"And with that, you\u2019re ready to start building sites with junctions. Congratulations!"))};var o={}}});
//# sourceMappingURL=2.9e2b1b12.chunk.js.map